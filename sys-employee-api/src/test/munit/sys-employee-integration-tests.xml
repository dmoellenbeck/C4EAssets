<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <spring:beans>
    	<spring:import resource="classpath:global.xml" />
        <spring:import resource="classpath:interface.xml" />
        <spring:import resource="classpath:implementation.xml" />
        <spring:import resource="classpath:common.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:before-test name="sys-employee-integration-testsBefore_Test" description="Before tests actions">
        <db:insert config-ref="Generic_Database_Configuration" autoGeneratedKeys="true" autoGeneratedKeysColumnNames="no" doc:name="Create test employee">
            <db:parameterized-query><![CDATA[INSERT INTO employees (dob,first_name,last_name,gender,hire_date) VALUES ('1987-07-07','Michael','Johnson','M','2007-07-07');]]></db:parameterized-query>
        </db:insert>
        <set-variable variableName="employeeId" value="#[payload[0].GENERATED_KEYS]" doc:name="Set 'employeeId' variable"/>
    </munit:before-test>
    <munit:after-test name="sys-employee-integration-testsAfter_Test" description="After tests actions">
        <db:delete config-ref="Generic_Database_Configuration" doc:name="Delete test employee">
            <db:parameterized-query><![CDATA[DELETE from employees where no = #[flowVars.employeeId];]]></db:parameterized-query>
        </db:delete>
    </munit:after-test>
    <munit:test name="get:/employees:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/employees:api-config-200-application/json]">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/employees" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="offset" value="0"/>
                <http:query-param paramName="maxResults" value="1"/>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="JSON to JAVA">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <munit:assert-true message="The HTTP content-type is not correct!" condition="#[messageInboundProperty('content-type').is(eq('application/json;charset=UTF-8'))]" doc:name="assert that - 'content-type' eq 'application/json;charset=UTF-8'" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - 'http.status' eq 200" />
        <munit:assert-true message="The number of returned employees is not correct!" condition="#[payload.size() == 1]" doc:name="assert that - one employee is returned"/>
    </munit:test>
    <munit:test name="get:/employees:api-config-200-application/xml-FlowTest" description="Verifying functionality of [get:/employees:api-config-200-application/xml]">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/employees" doc:name="HTTP">
            <http:request-builder>
            	<http:query-param paramName="offset" value="0"/>
                <http:query-param paramName="maxResults" value="1"/>
                <http:header headerName="Accept" value="application/xml" />
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="JSON to JAVA">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <munit:assert-true message="The HTTP content-type is not correct!" condition="#[messageInboundProperty('content-type').is(eq('application/xml;charset=UTF-8'))]" doc:name="assert that - 'content-type' eq 'application/xml;charset=UTF-8'" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - 'http.status' eq 200" />
        <munit:assert-true message="The number of returned employees is not correct!" condition="#[payload.size() == 1]" doc:name="assert that - one employee is returned"/>
    </munit:test>
    <munit:test name="get:/employees:api-config-406-application/json-FlowTest" description="Verifying functionality of [get:/employees:api-config-406-application/json]">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/employees" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/csv" />
            </http:request-builder>
            <http:success-status-code-validator values="406" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(406))]" doc:name="assert that - http.status eq 406" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_406_employees_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/employees/employee_id:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/employees/employee_id:api-config-200-application/json]">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/employees/{employee_id}" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="employee_id" value="#[flowVars.employeeId]"/>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="JSON to JAVA">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <munit:assert-true message="The HTTP content-type is not correct!" condition="#[messageInboundProperty('content-type').is(eq('application/json;charset=UTF-8'))]" doc:name="assert that - 'content-type' eq 'application/json;charset=UTF-8'" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - 'http.status' eq 200" />
        <munit:assert-true message="The Employee last name is not correct!" condition="#[payload.lastName =='Johnson']" doc:name="assert that - Employee last name eq 'Johnson'" />
    </munit:test>
    <munit:test name="get:/employees/employee_id:api-config-200-application/xml-FlowTest" description="Verifying functionality of [get:/employees/employee_id:api-config-200-application/xml]">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/employees/{employee_id}" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="employee_id" value="#[flowVars.employeeId]"/>
                <http:header headerName="Accept" value="application/xml"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="JSON to JAVA">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <munit:assert-true message="The HTTP content-type is not correct!" condition="#[messageInboundProperty('content-type').is(eq('application/xml;charset=UTF-8'))]" doc:name="assert that - 'content-type' eq 'application/xml;charset=UTF-8'" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - 'http.status' eq 200" />
        <munit:assert-true message="The Employee last name is not correct!" condition="#[payload.employees.employee.lastName == 'Johnson']" doc:name="assert that - Employee last name eq 'Johnson'" />
    </munit:test>
    <munit:test name="get:/employees/employee_id:api-config-404-application/json-FlowTest" description="Verifying functionality of [get:/employees/employee_id:api-config-404-application/json]">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/employees/{employee_id}" doc:name="HTTP">
            <http:request-builder>
            	<http:uri-param paramName="employee_id" value="#[0000000000]"/>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="404" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(404))]" doc:name="assert that - http.status eq 404" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_404_employees_{employee_id}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="delete:/employees/employee_id:api-config-204--FlowTest" description="Verifying functionality of [delete:/employees/employee_id:api-config-204-]">
        <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="/employees/{employee_id}" doc:name="HTTP">
        	<http:request-builder>
        		<http:uri-param paramName="employee_id" value="#[flowVars.employeeId]"/>
        	</http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(204))]" doc:name="assert that - http.status eq 204" />
    </munit:test>
    <munit:test name="put:/employees/employee_id:application/json:api-config-204--FlowTest" description="Verifying functionality of [put:/employees/employee_id:application/json:api-config-204-]">
        <set-payload value="#[getResource('scaffolder/request/put_employees_{employee_id}_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="/employees/{employee_id}" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="employee_id" value="#[flowVars.employeeId]"/>
                <http:header headerName="Content-Type" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(204))]" doc:name="assert that - http.status eq 204" />
    </munit:test>
    <munit:test name="post:/employees:application/json:api-config-500-application/json-FlowTest" description="Verifying functionality of [post:/employees:application/json:api-config-500-application/json]">
        <mock:throw-an exception-ref="#[new java.net.ConnectException(&quot;Connection timed out&quot;)]" whenCalling=".*:.*" doc:name="Throw a 'Connection Timed Out' Exception">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="post-employee-flow"/>
            </mock:with-attributes>
        </mock:throw-an>
        <set-payload value="#[getResource('scaffolder/request/post_employees_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/employees" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Content-Type" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/500_internal_server_error_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="put:/employees/employee_id:application/json:api-config-500-application/json-FlowTest" description="Verifying functionality of [put:/employees/employee_id:application/json:api-config-500-application/json]">
        <mock:throw-an exception-ref="#[new java.net.ConnectException(&quot;Connection timed out&quot;)]" whenCalling=".*:.*" doc:name="Throw a 'Connection Timed Out' Exception">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="put-employee-flow"/>
            </mock:with-attributes>
        </mock:throw-an>
        <set-payload value="#[getResource('scaffolder/request/put_employees_{employee_id}_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="/employees/{employee_id}" doc:name="HTTP">
            <http:request-builder>
            	<http:uri-param paramName="employee_id" value="#[flowVars.employeeId]"/>
                <http:header headerName="Content-Type" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/500_internal_server_error_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
</mule>